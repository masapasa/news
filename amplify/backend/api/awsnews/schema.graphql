type Blog
  @model(subscriptions: { level: public })
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [ read ] },
      { allow: groups, groups: [ "editors" ]}
    ]
  )
{
  id: ID!
  title: String!
  url: AWSURL!
  lastImportAt: AWSDateTime
  articles: [Article] @connection(keyName: "byBlog", fields: [ "id" ])
  stats: ArticleStatistics
}

type Article
  @model(subscriptions: { level: public })
  @key(name: "byBlog", fields: [ "blogId", "publishedAt" ])
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [ read ] }, # public access for readers
      { allow: groups, groups: [ "editors" ]}, # editor access
      { allow: private, provider: iam } # private access for backend
    ]
  )
{
  id: ID!
  blogId: ID!
  title: String!
  url: AWSURL!
  image: String
  published: Boolean!
  publishedAt: AWSDateTime!
  author: String
  contentUri: String
  excerpt: String
  tags: [String]
  blog: Blog @connection(fields: [ "blogId" ])
  sizedImage: SizedImage
}

type ArticleConnection {
  items: [Article]
  nextToken: String
}

type ArticleStatistics {
  total: Int!
  daily: [DailyStatistic]!
}

type DailyStatistic {
  date: AWSDate!
  newPosts: Int
}

type SizedImage {
  md: String
  lg: String
  xl: String
}

type Query {
  latestArticles(limit: Int, nextToken: String): ArticleConnection
    @aws_cognito_user_pools @aws_iam
  popularArticles(limit: Int, nextToken: String): ArticleConnection
    @aws_cognito_user_pools @aws_iam
  siteStatistics: ArticleStatistics
    @aws_cognito_user_pools @aws_iam
}
