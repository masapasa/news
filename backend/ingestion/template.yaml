---
AWSTemplateFormatVersion: '2010-09-09'

Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'dev'

  ProjectName:
    Type: String
    Description: The name of this project
    Default: 'aws-news'

  AppSyncApiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: AWS AppSync API ID -- created by Amplify
  
  AppSyncEndpoint:
    Type: AWS::SSM::Parameter::Value<String>
    Description: AWS AppSync Endpoint -- created by Amplify

  BlogsTable:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Name of DyanmoDB Blogs table -- created by Amplify

  ArticlesTable:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Name of DyanmoDB Articles table -- created by Amplify

  ContentBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Content storage bucket -- created by Amplify

  EventBus:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Name of custom event bus for this application

  ElasticacheEndpoint:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Elasticache Endpoint

  ElasticachePort:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Elasticache Port

  ElasticacheAccessSG:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>
    Description: Security Group allowing access to Elasticache

  LambdaSubnet1:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>
    Description: Subnet for Lambda 1

  LambdaSubnet2:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>
    Description: Subnet for Lambda 2

  ImageProcessingDependenciesLayer:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Image processing dependencies Lambda Layer

Conditions:
  IsProduction: !Equals 
    - !Ref Stage
    - 'prod'

Globals:
  Function:
    Runtime: ruby2.7
    Handler: app.handler
    Timeout: 25
    Tracing: Active
    Tags:
      Project: !Ref ProjectName
      Env: !Ref Stage

Resources:
  LoadBlogsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/loadBlogs.asl.json
      Name: !Sub "aws-news-load-blogs-${Stage}"
      DefinitionSubstitutions:
        LoadBlogsFunction: !GetAtt LoadBlogsFunction.Arn
        ProcessBlogStateMachine: !Ref ProcessBlogStateMachine
        # TODO: why is this not working? specify in ASL instead
        # SFNStartExecution: "arn:aws:states:::states:startExecution"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt LoadBlogsFunction.Arn
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource:
                - !Ref ProcessBlogStateMachine
  
  ProcessBlogStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/processBlog.asl.json
      Name: !Sub "aws-news-process-blog-${Stage}"
      DefinitionSubstitutions:
        BlogsTable: !Ref BlogsTable
        DDBUpdateItem: "arn:aws:states:::dynamodb:updateItem"
        LambdaInvoke: "arn:aws:states:::lambda:invoke"
        ProcessBlogFunction: !GetAtt ProcessBlogFunction.Arn
        SQSSendMessage: "arn:aws:states:::sqs:sendMessage"
        ProcessFailureQueue: !Ref ProcessFailureQueue
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt ProcessBlogFunction.Arn
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - !GetAtt ProcessFailureQueue.Arn
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BlogsTable}"

  ### Lambda ###
  IngestionDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "aws-news-${Stage}-ingestion-dependencies"
      Description: Dependencies for aws-news ingestion functions
      ContentUri: ingestion-dependencies
      CompatibleRuntimes:
        - ruby2.7
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile

  LoadBlogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Load blogs to be indexed by the service
      CodeUri: load-blogs/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BlogsTable
        - Version: '2012-10-17' # Policy Document
          Statement: # per docs, EventBridge only supports * today (@see https://github.com/awslabs/serverless-application-model/issues/1187)
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: '*'
      Layers:
        - !Ref IngestionDependenciesLayer
      Environment:
        Variables:
          BLOGS_TABLE: !Ref BlogsTable
          EVENT_BUS: !Ref EventBus
  
  ProcessBlogFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Process single blog, write new posts to articles table
      CodeUri: process-blog/
      Timeout: 300
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ArticlesTable
        - S3CrudPolicy:
            BucketName: !Ref ContentBucket
        - Version: '2012-10-17' # Policy Document
          Statement: # per docs, EventBridge only supports * today (@see https://github.com/awslabs/serverless-application-model/issues/1187)
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: '*'
      Layers:
        - !Ref IngestionDependenciesLayer
      Environment:
        Variables:
          ARTICLES_TABLE: !Ref ArticlesTable
          CONTENT_BUCKET: !Ref ContentBucket
          EVENT_BUS: !Ref EventBus

  ProcessArticleImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: process-article-image/
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 1024
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ArticlesTable
        - S3WritePolicy:
            BucketName: !Ref ContentBucket
      Layers:
        - Fn::Sub: "${ImageProcessingDependenciesLayer}"
      Environment:
        Variables:
          ARTICLES_TABLE: !Ref ArticlesTable
          CONTENT_BUCKET: !Ref ContentBucket
          DESIRED_IMAGE_WIDTH: 1024
          # Keep-Alive, @see https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Events:
        OnCreateEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              detail-type:
                - article_created

  PublishNewContentToAppSyncFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publish-new-content-to-appsync/
      Handler: index.handler
      Runtime: nodejs12.x
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - appsync:GraphQL
              Resource:
                - !Sub "arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApiId}/types/Mutation/fields/updateBlog"
                - !Sub "arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApiId}/types/Mutation/fields/updateArticle"
      Environment:
        Variables:
          APPSYNC_ENDPOINT: !Ref AppSyncEndpoint
      Events:
        OnCreateEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              detail-type:
                - blog_created
                - article_created

  PublishNewContentToElasticacheFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: publish-new-content-to-elasticache/
      Handler: index.handler
      Runtime: nodejs12.x
      Policies:
        - VPCAccessPolicy: {}
      VpcConfig:
        SecurityGroupIds:
          - !Ref ElasticacheAccessSG
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
      Environment:
        Variables:
          ELASTICACHE_ENDPOINT: !Ref ElasticacheEndpoint
          ELASTICACHE_PORT: !Ref ElasticachePort
          LATEST_CONTENT_KEY: "articles:latest"
          BLOG_COUNT_KEY: "blog:count"
          ARTICLE_COUNT_KEY: "article:count"
      Events:
        OnCreateEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Sub ${ProjectName}-${Stage}-eventbus
            Pattern:
              detail-type:
                - article_created

  ### SQS ###
  ProcessFailureQueue:
    Type: AWS::SQS::Queue

  ### EventBridge ###
  # Rule to run step function each weekday at 8am and 4pm US Central Standard
  # Scheduled rules need to be attached to the default EventBus, not custom
  ScheduleRule:
    Condition: IsProduction
    Type: AWS::Events::Rule
    Properties:
      Description: Start Step Functions execution
      ScheduleExpression: cron(0 14,22 ? * MON-FRI *)
      State: ENABLED
      Targets:
        - Arn: !Ref LoadBlogsStateMachine
          Id: LoadBlogsStateMachine
          RoleArn: !GetAtt EventBridgeRole.Arn

  ### IAM ###
  EventBridgeRole:
    Condition: IsProduction
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridgeStartStateMachine
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref LoadBlogsStateMachine
